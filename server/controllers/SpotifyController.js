const SpotifyWebApi = require('spotify-web-api-node');
const OpenAIController = require('./OpenAIController');  // Import the OpenAIController

// Initialize Spotify API
const spotifyApi = new SpotifyWebApi({
    clientId: process.env.CLIENT_ID,
    clientSecret: process.env.CLIENT_SECRET
});

class SpotifyController {
    constructor(workoutLength, genre, bpm) {
        this.workoutLength = workoutLength;
        this.genre = genre;
        this.bpm = bpm;
        this.openAIController = new OpenAIController(workoutLength, genre, bpm);
        this.playlist = [];
        this.currentSongIndex = 0;
    }

    async authenticate() {
        const data = await spotifyApi.clientCredentialsGrant();
        spotifyApi.setAccessToken(data.body['access_token']);
        console.log('Access token retrieved successfully');
    }

    async getPlaylist() {
        await this.authenticate();
        this.playlist = await this.openAIController.getPlaylist();
        console.log('Playlist generated by OpenAI:', this.playlist);
    }

    playCurrentSong() {
        if (this.playlist.length === 0) {
            console.log('Playlist is empty. Fetch the playlist first.');
            return;
        }

        const currentSong = this.playlist[this.currentSongIndex];
        console.log(`Playing song: ${currentSong}`);

    }

    nextSong() {
        if (this.currentSongIndex < this.playlist.length - 1) {
            this.currentSongIndex++;
            this.playCurrentSong();
        } else {
            console.log('End of playlist.');
        }
    }

    previousSong() {
        if (this.currentSongIndex > 0) {
            this.currentSongIndex--;
            this.playCurrentSong();
        } else {
            console.log('Already at the beginning of the playlist.');
        }
    }

    listSongs() {
        console.log('Generated Playlist:', this.playlist);
        return this.playlist;
    }
}

module.exports = SpotifyController;