require('dotenv').config();
const SpotifyWebApi = require('spotify-web-api-node');
const OpenAIController = require('./OpenAiController');

// Initialize Spotify API
const spotifyApi = new SpotifyWebApi({
    clientId: process.env.CLIENT_ID,
    clientSecret: process.env.CLIENT_SECRET,
    redirectUri: process.env.REDIRECT_URI,  // Use the same redirect URI as your server.js
});

class SpotifyController {
    constructor(workoutLength, genre, bpm) {
        this.workoutLength = workoutLength;
        this.genre = genre;
        this.bpm = bpm;
        this.openAIController = new OpenAIController(workoutLength, genre, bpm);
        this.playlist = [];
        this.currentSongIndex = 0;
    }

    // No need for authenticate here, as it's handled via Authorization Code Flow in the main app

    async getPlaylist() {
        try {
            // Get the playlist from OpenAIController
            this.playlist = await this.openAIController.getPlaylist();
            if (this.playlist && this.playlist.length > 0) {
                console.log('Playlist generated by OpenAI:', this.playlist);
            } else {
                console.log('No songs returned from OpenAI.');
            }
        } catch (error) {
            console.error('Error generating playlist:', error);
        }
    }

    // Search and play the current song from the playlist
    async playCurrentSong() {
        if (this.playlist.length === 0) {
            console.log('Playlist is empty. Fetch the playlist first.');
            return;
        }

        const currentSongTitle = this.playlist[this.currentSongIndex];  // Get the song title
        console.log(`Searching for song: ${currentSongTitle}`);

        try {
            // Search for the song by title using the Spotify API
            const searchResponse = await spotifyApi.searchTracks(`track:${currentSongTitle}`, { limit: 1 });

            if (searchResponse.body.tracks.items.length > 0) {
                const firstTrack = searchResponse.body.tracks.items[0];
                console.log(`Found song: ${firstTrack.name} by ${firstTrack.artists.map(artist => artist.name).join(', ')}`);

                const trackUri = firstTrack.uri;
                console.log(`Playing track with URI: ${trackUri}`);

                // Play the song using the authenticated user's account
                await spotifyApi.play({
                    uris: [trackUri]
                });
                console.log('Playback started');
            } else {
                console.log('No results found for the song title.');
            }
        } catch (error) {
            console.error('Error searching for the song:', error);
        }
    }

    async pauseCurrentSong() {
        try {
            await spotifyApi.pause();  // Pause the currently playing track
            console.log('Playback paused');
        } catch (error) {
            console.error('Error pausing playback:', error);
        }
    }

    nextSong() {
        if (this.currentSongIndex < this.playlist.length - 1) {
            this.currentSongIndex++;
            this.playCurrentSong();
        } else {
            console.log('End of playlist.');
        }
    }

    previousSong() {
        if (this.currentSongIndex > 0) {
            this.currentSongIndex--;
            this.playCurrentSong();
        } else {
            console.log('Already at the beginning of the playlist.');
        }
    }

    listSongs() {
        console.log('Generated Playlist:', this.playlist);
        return this.playlist;
    }
}

module.exports = SpotifyController;